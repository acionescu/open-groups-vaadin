Notifications:


1) Notification rules

# for each entity the user is able to set the depth of notification and the events to trigger the notification

# the depth -> possible values: 
-1 -> selected entity + all entities under it
0 to max integer -> the depth, where 0 is only the selected entity, 1 the selected entity + its direct children and so on... 

# the events - > possible values:

-> added, updated, voted or vote changed


# the user will be able to create more notification rules for each entity. Each rule will contain:

-> the depth level
-> one or more event types
-> notification mode ( immediately, daily, weekly, monthly )


# notification rules will be stored in table "user_notification_rules" as follows:

-> user_id
-> entity_id
-> depth
-> event_type(action_type_id)
-> notification_mode_id
-> enabled

A row will be inserted for each combination ( user_id, entity_id, event_type )

# CRUD operations on notification rules will be available for each user on the allowed(TBD) entities


2) Sending notifications

2.1) Getting the data

A scheduled job will check the "activity_log" table, select all the events that respect the criteria and process them.
A job will run for each notification mode.

For "immediately" mode:

Search criteria:
- events not yet processed ( newer then the timestamp of the last processed event )
- events older then 5 minutes ( some variable time )
- events newer then 1 month ( variable time )

For other modes:

For each user, notifications will be aggregated in a single mail

2.2) Composing the mail

Title: {Instance name}:{Event type}:{Entity name}

Content:

Message for {entity type}{event type}

Small preview with link

Notification cause ( link towards the notification rule that caused this mail )





